<?xml version="1.0" encoding="UTF-8" ?>
<rss version="2.0">
    <channel>
      <title>🫧 11ze</title>
      <link>https://wangze.tech</link>
      <description>Last 10 notes on 🫧 11ze</description>
      <generator>Quartz -- quartz.jzhao.xyz</generator>
      <item>
    <title>Oh My Zsh</title>
    <link>https://wangze.tech/Oh-My-Zsh</link>
    <guid>https://wangze.tech/Oh-My-Zsh</guid>
    <description>...</description>
    <pubDate>Thu, 02 May 2024 12:58:00 GMT</pubDate>
  </item><item>
    <title>设计一个短链系统</title>
    <link>https://wangze.tech/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%9F%AD%E9%93%BE%E7%B3%BB%E7%BB%9F</link>
    <guid>https://wangze.tech/%E8%AE%BE%E8%AE%A1%E4%B8%80%E4%B8%AA%E7%9F%AD%E9%93%BE%E7%B3%BB%E7%BB%9F</guid>
    <description></description>
    <pubDate>Wed, 01 May 2024 08:52:00 GMT</pubDate>
  </item><item>
    <title>11ze&#039;s Garden</title>
    <link>https://wangze.tech/</link>
    <guid>https://wangze.tech/</guid>
    <description> 我的开发环境 搭建数字花园 学英语 MySQL 实战 45 讲 Redis 核心技术与实战 .</description>
    <pubDate>Wed, 01 May 2024 07:01:00 GMT</pubDate>
  </item><item>
    <title>PHP 开发设置</title>
    <link>https://wangze.tech/PHP-%E5%BC%80%E5%8F%91%E8%AE%BE%E7%BD%AE</link>
    <guid>https://wangze.tech/PHP-%E5%BC%80%E5%8F%91%E8%AE%BE%E7%BD%AE</guid>
    <description>Laravel Pint 如何在PHPSTORM 配置Laravel Pint 代码格式化包 Laravel Pint VSCode.</description>
    <pubDate>Wed, 01 May 2024 06:57:00 GMT</pubDate>
  </item><item>
    <title>PHP 错误码设计</title>
    <link>https://wangze.tech/PHP-%E9%94%99%E8%AF%AF%E7%A0%81%E8%AE%BE%E8%AE%A1</link>
    <guid>https://wangze.tech/PHP-%E9%94%99%E8%AF%AF%E7%A0%81%E8%AE%BE%E8%AE%A1</guid>
    <description>目标 错误码包含：数字、英文、含义，还可以有 HTTP Status 这些最好放到一起，不然添加时容易漏 方案 静态变量：数组 多个名字类似的静态变量 静态工厂方法 枚举和注解 讨论 结论 参考 Using attributes to add value PHP 异常与错误处理 .</description>
    <pubDate>Wed, 01 May 2024 06:57:00 GMT</pubDate>
  </item><item>
    <title>支付技术方案</title>
    <link>https://wangze.tech/%E6%94%AF%E4%BB%98%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88</link>
    <guid>https://wangze.tech/%E6%94%AF%E4%BB%98%E6%8A%80%E6%9C%AF%E6%96%B9%E6%A1%88</guid>
    <description></description>
    <pubDate>Wed, 01 May 2024 06:57:00 GMT</pubDate>
  </item><item>
    <title>我的开发环境</title>
    <link>https://wangze.tech/%E6%88%91%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83</link>
    <guid>https://wangze.tech/%E6%88%91%E7%9A%84%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83</guid>
    <description>设备 M1 MacBook Pro 14 先更新系统 Homebrew 官网 brew tap homebrew/cask-fonts brew tap homebrew/cask-versions brew tap buo/cask-upgrade brew tap mongodb/brew brew tap homebrew/autoupdate ...</description>
    <pubDate>Mon, 29 Apr 2024 03:27:00 GMT</pubDate>
  </item><item>
    <title>03｜事务隔离：为什么你改了还看不见？</title>
    <link>https://wangze.tech/03%EF%BD%9C%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E6%94%B9%E4%BA%86%E8%BF%98%E7%9C%8B%E4%B8%8D%E8%A7%81%EF%BC%9F</link>
    <guid>https://wangze.tech/03%EF%BD%9C%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E6%94%B9%E4%BA%86%E8%BF%98%E7%9C%8B%E4%B8%8D%E8%A7%81%EF%BC%9F</guid>
    <description>隔离型与隔离级别 读未提交 read uncommitted 一个事务还没提交时，它做的变更就能被别的事务看到。 读提交 read committed 一个事务提交之后，它做的变更才会被其他事务看到。 可重复读 repeatable read 一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。 ...</description>
    <pubDate>Sun, 28 Apr 2024 16:01:00 GMT</pubDate>
  </item><item>
    <title>02｜日志系统：一条 SQL 更新语句是如何执行的？</title>
    <link>https://wangze.tech/02%EF%BD%9C%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%EF%BC%9A%E4%B8%80%E6%9D%A1-SQL-%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84%EF%BC%9F</link>
    <guid>https://wangze.tech/02%EF%BD%9C%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%EF%BC%9A%E4%B8%80%E6%9D%A1-SQL-%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84%EF%BC%9F</guid>
    <description>Update 语句执行流程 重要的日志模块：redo Log InnoDB 引擎特有的日志 WAL（Write-Ahead Logging） 先写日志，再写磁盘 当有一条记录需要更新的时候，InnoDB 引擎先把记录写到 redo log 并更新内存，引擎会在适当的时候，将这个操作记录更新到磁盘，这个更新往往是在系统比较空闲的时候做 ...</description>
    <pubDate>Thu, 25 Apr 2024 08:10:00 GMT</pubDate>
  </item><item>
    <title>01｜基础架构：一条 SQL 查询语句是如何执行的？</title>
    <link>https://wangze.tech/01%EF%BD%9C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%EF%BC%9A%E4%B8%80%E6%9D%A1-SQL-%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84%EF%BC%9F</link>
    <guid>https://wangze.tech/01%EF%BD%9C%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%EF%BC%9A%E4%B8%80%E6%9D%A1-SQL-%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84%EF%BC%9F</guid>
    <description>MySQL 的逻辑链接架构图 1. 客户端连接数据库 用 wait_timeout 参数控制连接器长时间没操作自动断开的时间 只有新建的连接才会使用新的权限设置 尽量使用长连接 使用长连接的问题：可能内存疯涨，因为 MySQL 在执行过程中临时使用的内存是管理在连接对象里面，在连接断开的时候才释放 两个解决方案 定期断开长连接。使用一段时间，或者程序里面判断执行过一个占用内存的大查询后，主动断开连接，之后要查询再重连 MySQL 5.7 或更新版本，可以在执行一个比较大的操作后，执行 mysql_reset_connection 初始化连接资源 这个过程不会重连和重新做权限验证，会将连接恢复到刚刚创建完时的状态 2.</description>
    <pubDate>Thu, 25 Apr 2024 06:49:01 GMT</pubDate>
  </item>
    </channel>
  </rss>