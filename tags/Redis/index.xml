<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Redis on</title><link>https://wangze.tech/tags/Redis/</link><description>Recent content in Redis on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 23 May 2023 21:12:16 +0800</lastBuildDate><atom:link href="https://wangze.tech/tags/Redis/index.xml" rel="self" type="application/rss+xml"/><item><title>30｜如何使用 Redis 实现分布式锁？</title><link>https://wangze.tech/30%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Redis-%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</link><pubDate>Tue, 23 May 2023 21:12:16 +0800</pubDate><guid>https://wangze.tech/30%E5%A6%82%E4%BD%95%E4%BD%BF%E7%94%A8-Redis-%E5%AE%9E%E7%8E%B0%E5%88%86%E5%B8%83%E5%BC%8F%E9%94%81/</guid><description>单机版
用一个变量表示：0 没有线程获取到锁；1 有线程获取到锁 分布式锁
锁变量需要有一个共享存储系统来维护
基于单个节点
加锁</description></item><item><title>29｜无锁的原子操作：Redis 如何应对并发访问？</title><link>https://wangze.tech/29%E6%97%A0%E9%94%81%E7%9A%84%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9CRedis-%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/</link><pubDate>Tue, 23 May 2023 21:09:35 +0800</pubDate><guid>https://wangze.tech/29%E6%97%A0%E9%94%81%E7%9A%84%E5%8E%9F%E5%AD%90%E6%93%8D%E4%BD%9CRedis-%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E5%B9%B6%E5%8F%91%E8%AE%BF%E9%97%AE/</guid><description>加锁
原子操作
单命令操作
多个操作在 Redis 中实现成一个操作（如改源码） INCR/DECR 命令 以原子性方式执行 Lua 脚本</description></item><item><title>28｜Pika：如何基于 SSD 实现大容量 Redis？</title><link>https://wangze.tech/28Pika%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8E-SSD-%E5%AE%9E%E7%8E%B0%E5%A4%A7%E5%AE%B9%E9%87%8F-Redis/</link><pubDate>Tue, 23 May 2023 21:04:30 +0800</pubDate><guid>https://wangze.tech/28Pika%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8E-SSD-%E5%AE%9E%E7%8E%B0%E5%A4%A7%E5%AE%B9%E9%87%8F-Redis/</guid><description>基于大内存实现大容量 Redis 实例的潜在问题
内存快照 RDB 生成和恢复效率低 主从节点全量同步时长增加、缓冲区易溢出 Pika 键值数据库</description></item><item><title>27｜缓存被污染了，该怎么办？</title><link>https://wangze.tech/27%E7%BC%93%E5%AD%98%E8%A2%AB%E6%B1%A1%E6%9F%93%E4%BA%86%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8A%9E/</link><pubDate>Tue, 23 May 2023 21:03:11 +0800</pubDate><guid>https://wangze.tech/27%E7%BC%93%E5%AD%98%E8%A2%AB%E6%B1%A1%E6%9F%93%E4%BA%86%E8%AF%A5%E6%80%8E%E4%B9%88%E5%8A%9E/</guid><description>缓存污染
留存在缓存中的数据，实际不会被再次访问了，但是又占据了缓存空间。 如果这样的数据体量很大，甚至占满了缓存，每次有新数据写入缓存时，还需要把这些数据逐步淘汰出缓存，就会增加缓存操作的时间开销。 解决
volatile-ttl 策略：设置时需明确知道数据被再次访问的情况时
LRU 缓存策略：只看数据的访问时间，可能在对大量数据进行一次全体读取后没能及时删除缓存数据
LFU 缓存策略</description></item><item><title>26｜缓存异常（下）：如何解决缓存雪崩、击穿、穿透难题？</title><link>https://wangze.tech/26%E7%BC%93%E5%AD%98%E5%BC%82%E5%B8%B8%E4%B8%8B%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%87%BB%E7%A9%BF%E7%A9%BF%E9%80%8F%E9%9A%BE%E9%A2%98/</link><pubDate>Tue, 23 May 2023 21:02:06 +0800</pubDate><guid>https://wangze.tech/26%E7%BC%93%E5%AD%98%E5%BC%82%E5%B8%B8%E4%B8%8B%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%BC%93%E5%AD%98%E9%9B%AA%E5%B4%A9%E5%87%BB%E7%A9%BF%E7%A9%BF%E9%80%8F%E9%9A%BE%E9%A2%98/</guid><description>三大问题的原因和应对方案
缓存雪崩 大量的应用请求无法在 Redis 缓存中进行处理，紧接着，应用将大量请求发送到数据库层，导致数据库层的压力激增。 缓存击穿 针对某个访问非常频繁的热点数据的请求，无法在缓存中进行处理，紧接着，访问该数据的大量请求，一下子都发送到了后端数据库，导致了数据库压力激增，会影响数据库处理其他请求。 缓存击穿的情况，经常发生在热点数据过期失效时。 缓存穿透 要访问的数据既不在 Redis 缓存中，也不在数据库中，导致请求在访问缓存时，发生缓存缺失，再去访问数据库时，发现数据库中也没有要访问的数据。 此时缓存成了摆设。 同时给缓存和数据库巨大压力。 尽量使用预防式方案</description></item><item><title>25｜缓存异常（上）：如何解决缓存和数据库的数据不一致问题？</title><link>https://wangze.tech/25%E7%BC%93%E5%AD%98%E5%BC%82%E5%B8%B8%E4%B8%8A%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/</link><pubDate>Tue, 23 May 2023 21:01:05 +0800</pubDate><guid>https://wangze.tech/25%E7%BC%93%E5%AD%98%E5%BC%82%E5%B8%B8%E4%B8%8A%E5%A6%82%E4%BD%95%E8%A7%A3%E5%86%B3%E7%BC%93%E5%AD%98%E5%92%8C%E6%95%B0%E6%8D%AE%E5%BA%93%E7%9A%84%E6%95%B0%E6%8D%AE%E4%B8%8D%E4%B8%80%E8%87%B4%E9%97%AE%E9%A2%98/</guid><description>数据的一致性
缓存中有数据，缓存的数据值需要和数据库中的值相同 缓存中没有数据，数据库中的值必须是最新值 「读写缓存」
要保证一致性可以采用同步直写策略 适用于读写相当的业务场景 「只读缓存」
数据不一致的问题原因、现象和应对方案</description></item><item><title>24｜替换策略：缓存满了怎么办？</title><link>https://wangze.tech/24%E6%9B%BF%E6%8D%A2%E7%AD%96%E7%95%A5%E7%BC%93%E5%AD%98%E6%BB%A1%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/</link><pubDate>Tue, 23 May 2023 20:58:51 +0800</pubDate><guid>https://wangze.tech/24%E6%9B%BF%E6%8D%A2%E7%AD%96%E7%95%A5%E7%BC%93%E5%AD%98%E6%BB%A1%E4%BA%86%E6%80%8E%E4%B9%88%E5%8A%9E/</guid><description>建议把缓存容量设置为总数据量的 15% 到 30%，兼顾访问性能和内存空间开销
CONFIG SET maxmemory 4gb 数据淘汰策略
noeviction（不进行数据淘汰）
一旦缓存被写满，再有写请求时，Redis 不再提供服务，直接返回错误 进行数据淘汰的策略</description></item><item><title>23｜旁路缓存：Redis 是如何工作的？</title><link>https://wangze.tech/23%E6%97%81%E8%B7%AF%E7%BC%93%E5%AD%98Redis-%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/</link><pubDate>Tue, 23 May 2023 20:57:57 +0800</pubDate><guid>https://wangze.tech/23%E6%97%81%E8%B7%AF%E7%BC%93%E5%AD%98Redis-%E6%98%AF%E5%A6%82%E4%BD%95%E5%B7%A5%E4%BD%9C%E7%9A%84/</guid><description>旁路缓存：读取缓存、读取数据库和更新缓存的操作都需要在应用程序中完成
Redis 适合做缓存
在分层系统中，数据暂存在快速子系统中有助于加速访问 缓存容量有限，缓存写满时，数据需要被淘汰 只读缓存</description></item><item><title>22｜第 11～21 讲课后思考题答案及常见问题答疑</title><link>https://wangze.tech/22%E7%AC%AC-1121-%E8%AE%B2%E8%AF%BE%E5%90%8E%E6%80%9D%E8%80%83%E9%A2%98%E7%AD%94%E6%A1%88%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E7%AD%94%E7%96%91/</link><pubDate>Tue, 23 May 2023 20:56:48 +0800</pubDate><guid>https://wangze.tech/22%E7%AC%AC-1121-%E8%AE%B2%E8%AF%BE%E5%90%8E%E6%80%9D%E8%80%83%E9%A2%98%E7%AD%94%E6%A1%88%E5%8F%8A%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98%E7%AD%94%E7%96%91/</guid><description>问题 1：如何使用慢查询日志和 latency monitor 排查执行慢的操作？
设置 slowlog-log-slower-than：对执行时间大于多少微妙的命令进行记录 设置 slowlog-max-len：日志最多记录多少调命令 使用 SLOWLOG GET 命令查看慢查询日志 也可以使用 latency monitor 监控工具 监控 Redis 运行过程中的峰值延迟情况 从 2.</description></item><item><title>21｜缓冲区：一个可能引发“惨案”的地方</title><link>https://wangze.tech/21%E7%BC%93%E5%86%B2%E5%8C%BA%E4%B8%80%E4%B8%AA%E5%8F%AF%E8%83%BD%E5%BC%95%E5%8F%91%E6%83%A8%E6%A1%88%E7%9A%84%E5%9C%B0%E6%96%B9/</link><pubDate>Tue, 23 May 2023 20:53:57 +0800</pubDate><guid>https://wangze.tech/21%E7%BC%93%E5%86%B2%E5%8C%BA%E4%B8%80%E4%B8%AA%E5%8F%AF%E8%83%BD%E5%BC%95%E5%8F%91%E6%83%A8%E6%A1%88%E7%9A%84%E5%9C%B0%E6%96%B9/</guid><description>客户端输入和输出缓冲区
避免客户端和服务端的请求发送和处理速度不匹配
输入缓冲区会先把客户端发送过来的命令暂存起来，Redis 主线程再从输入缓冲区中读取命令，进行处理。当 Redis 主线程处理完数据后，会把结果写入到输出缓冲区，再通过输出缓冲区返回给客户端
查看输入缓冲区的内存使用情况：CLIENT LIST 命令</description></item><item><title>20｜删除数据后，为什么内存占用率还是很高？</title><link>https://wangze.tech/20%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%90%8E%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E7%8E%87%E8%BF%98%E6%98%AF%E5%BE%88%E9%AB%98/</link><pubDate>Tue, 23 May 2023 20:52:16 +0800</pubDate><guid>https://wangze.tech/20%E5%88%A0%E9%99%A4%E6%95%B0%E6%8D%AE%E5%90%8E%E4%B8%BA%E4%BB%80%E4%B9%88%E5%86%85%E5%AD%98%E5%8D%A0%E7%94%A8%E7%8E%87%E8%BF%98%E6%98%AF%E5%BE%88%E9%AB%98/</guid><description>内存碎片
现象：内存空间闲置
生成原因：操作系统的内存分配机制 + Redis 的负载特征
操作系统按固定大小分配内存，而不是完全按照应用程序申请的内存空间大小给程序分配
当程序申请的内存最接近某个固定值时，Redis 使用的 jemalloc 会给它分配相应大小的空间</description></item><item><title>19｜波动的响应延迟：如何应对变慢的 Redis？（下）</title><link>https://wangze.tech/19%E6%B3%A2%E5%8A%A8%E7%9A%84%E5%93%8D%E5%BA%94%E5%BB%B6%E8%BF%9F%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E5%8F%98%E6%85%A2%E7%9A%84-Redis%E4%B8%8B/</link><pubDate>Tue, 23 May 2023 20:49:49 +0800</pubDate><guid>https://wangze.tech/19%E6%B3%A2%E5%8A%A8%E7%9A%84%E5%93%8D%E5%BA%94%E5%BB%B6%E8%BF%9F%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E5%8F%98%E6%85%A2%E7%9A%84-Redis%E4%B8%8B/</guid><description>文件系统：AOF 模式
AOF 重写会对磁盘进行大量 IO 操作，fsync 需要等到数据写到磁盘后才能返回
everysec 时，使用后台子线程调用 fsync 写日志</description></item><item><title>18｜波动的响应延迟：如何应对变慢的 Redis？（上）</title><link>https://wangze.tech/18%E6%B3%A2%E5%8A%A8%E7%9A%84%E5%93%8D%E5%BA%94%E5%BB%B6%E8%BF%9F%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E5%8F%98%E6%85%A2%E7%9A%84-Redis%E4%B8%8A/</link><pubDate>Mon, 22 May 2023 21:27:57 +0800</pubDate><guid>https://wangze.tech/18%E6%B3%A2%E5%8A%A8%E7%9A%84%E5%93%8D%E5%BA%94%E5%BB%B6%E8%BF%9F%E5%A6%82%E4%BD%95%E5%BA%94%E5%AF%B9%E5%8F%98%E6%85%A2%E7%9A%84-Redis%E4%B8%8A/</guid><description>Redis 真的变慢了吗？
查看 Redis 的响应延迟 redis-cli &amp;ndash;latency -h host -p port 基于当前环境下的 Redis 基线性能做判断 基线性能：一个系统在低压力、无干扰下的基本性能，这个性能只由当前的软硬件配置决定</description></item><item><title>17｜为什么 CPU 结构也会影响 Redis 的性能？</title><link>https://wangze.tech/17%E4%B8%BA%E4%BB%80%E4%B9%88-CPU-%E7%BB%93%E6%9E%84%E4%B9%9F%E4%BC%9A%E5%BD%B1%E5%93%8D-Redis-%E7%9A%84%E6%80%A7%E8%83%BD/</link><pubDate>Mon, 22 May 2023 21:23:13 +0800</pubDate><guid>https://wangze.tech/17%E4%B8%BA%E4%BB%80%E4%B9%88-CPU-%E7%BB%93%E6%9E%84%E4%B9%9F%E4%BC%9A%E5%BD%B1%E5%93%8D-Redis-%E7%9A%84%E6%80%A7%E8%83%BD/</guid><description>NUMA 架构（Non-Uniform Memory Access 非统一内存访问架构）
图
第一步
第二步</description></item><item><title>16｜异步机制：如何避免单线程模型的阻塞？</title><link>https://wangze.tech/16%E5%BC%82%E6%AD%A5%E6%9C%BA%E5%88%B6%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%98%BB%E5%A1%9E/</link><pubDate>Mon, 22 May 2023 21:21:08 +0800</pubDate><guid>https://wangze.tech/16%E5%BC%82%E6%AD%A5%E6%9C%BA%E5%88%B6%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E5%8D%95%E7%BA%BF%E7%A8%8B%E6%A8%A1%E5%9E%8B%E7%9A%84%E9%98%BB%E5%A1%9E/</guid><description>4 类交互对象和具体的操作之间的关系
和客户端交互时的阻塞点
集合的全量查询和聚合操作 删除 bigkey 清空数据库 和磁盘交互时的阻塞点</description></item><item><title>15｜消息队列的考验：Redis 有哪些解决方案？</title><link>https://wangze.tech/15%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E8%80%83%E9%AA%8CRedis-%E6%9C%89%E5%93%AA%E4%BA%9B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</link><pubDate>Mon, 22 May 2023 21:19:48 +0800</pubDate><guid>https://wangze.tech/15%E6%B6%88%E6%81%AF%E9%98%9F%E5%88%97%E7%9A%84%E8%80%83%E9%AA%8CRedis-%E6%9C%89%E5%93%AA%E4%BA%9B%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/</guid><description>消息队列的三大需求：消息保序、重复消息处理、消息可靠性保证
List
支持阻塞获取数据 不支持消费组 Stream
Redis 5.0 之后专门为消息队列设计的数据类型 不同消费组的消费者可以消费同一个消息 同一消费组的消费者不消费同一消息 自动生成全局唯一 ID 两者比较</description></item><item><title>14｜如何在 Redis 中保存时间序列数据？</title><link>https://wangze.tech/14%E5%A6%82%E4%BD%95%E5%9C%A8-Redis-%E4%B8%AD%E4%BF%9D%E5%AD%98%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE/</link><pubDate>Mon, 22 May 2023 21:18:22 +0800</pubDate><guid>https://wangze.tech/14%E5%A6%82%E4%BD%95%E5%9C%A8-Redis-%E4%B8%AD%E4%BF%9D%E5%AD%98%E6%97%B6%E9%97%B4%E5%BA%8F%E5%88%97%E6%95%B0%E6%8D%AE/</guid><description>要求
写要快 查询模式多 一、同时使用 Hash 和 Sorted Set
{1: a, 2: b, 3: c} + setKey: {1: a, 2: b, 3: c}</description></item><item><title>13｜GEO 是什么？还可以定义新的数据类型吗？</title><link>https://wangze.tech/13GEO-%E6%98%AF%E4%BB%80%E4%B9%88%E8%BF%98%E5%8F%AF%E4%BB%A5%E5%AE%9A%E4%B9%89%E6%96%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%90%97/</link><pubDate>Mon, 22 May 2023 21:16:00 +0800</pubDate><guid>https://wangze.tech/13GEO-%E6%98%AF%E4%BB%80%E4%B9%88%E8%BF%98%E5%8F%AF%E4%BB%A5%E5%AE%9A%E4%B9%89%E6%96%B0%E7%9A%84%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B%E5%90%97/</guid><description>LBS：位置信息服务（Location-Based Service）
GEO：数据类型
底层数据结构用 Sorted Set 实现
GeoHash 编码方法
基本原理：二分区间，区间编码</description></item><item><title>12｜有一亿个 keys 要统计，应该用哪种集合？</title><link>https://wangze.tech/12%E6%9C%89%E4%B8%80%E4%BA%BF%E4%B8%AA-keys-%E8%A6%81%E7%BB%9F%E8%AE%A1%E5%BA%94%E8%AF%A5%E7%94%A8%E5%93%AA%E7%A7%8D%E9%9B%86%E5%90%88/</link><pubDate>Sun, 21 May 2023 22:54:45 +0800</pubDate><guid>https://wangze.tech/12%E6%9C%89%E4%B8%80%E4%BA%BF%E4%B8%AA-keys-%E8%A6%81%E7%BB%9F%E8%AE%A1%E5%BA%94%E8%AF%A5%E7%94%A8%E5%93%AA%E7%A7%8D%E9%9B%86%E5%90%88/</guid><description>聚合统计
统计多个集合元素的聚合结果，包括：
统计多个集合的共有元素（交集统计） 把两个集合相比，统计其中一个集合独有的元素（差集统计） 统计多个集合的所有元素（并集统计） 使用 Set
并集：SUNIONSTORE user:new user:id user:id:20200803 差集：SDIFFSTORE user:new user:id:20200804 user:id 交集：SINTERSTORE user:id:rem user:id:20200803 user:id:20200804 计算复杂度较高，数据量较大时会导致 Redis 实例阻塞 三个命令都会生成新 key，但从库一般是 readonly（不建议开写），想在从库操作需使用 SUNION、SDIFF、SINTER，这些命令可以计算出结果，但不会生成新 key 可以从主从集群中选择一个从库专门负责聚合计算，或者是把数据读取到客户端，在客户端来完成聚合统计，这样就可以规避阻塞主库实例和其他从库实例的风险了 排序统计</description></item><item><title>11｜“万金油”的 String，为什么不好用了？</title><link>https://wangze.tech/11%E4%B8%87%E9%87%91%E6%B2%B9%E7%9A%84-String%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%A5%BD%E7%94%A8%E4%BA%86/</link><pubDate>Fri, 19 May 2023 22:32:31 +0800</pubDate><guid>https://wangze.tech/11%E4%B8%87%E9%87%91%E6%B2%B9%E7%9A%84-String%E4%B8%BA%E4%BB%80%E4%B9%88%E4%B8%8D%E5%A5%BD%E7%94%A8%E4%BA%86/</guid><description>Redis 容量预估工具
String 类型
元数据：内存空间记录数据长度、空间使用等信息
int 编码方式：当保存 64 位有符号整数时，会保存为 8 字节的 Long 类型整数</description></item><item><title>09｜切片集群：数据增多了，是该加内存还是加实例？</title><link>https://wangze.tech/09%E5%88%87%E7%89%87%E9%9B%86%E7%BE%A4%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%A4%9A%E4%BA%86%E6%98%AF%E8%AF%A5%E5%8A%A0%E5%86%85%E5%AD%98%E8%BF%98%E6%98%AF%E5%8A%A0%E5%AE%9E%E4%BE%8B/</link><pubDate>Thu, 18 May 2023 21:33:25 +0800</pubDate><guid>https://wangze.tech/09%E5%88%87%E7%89%87%E9%9B%86%E7%BE%A4%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%A4%9A%E4%BA%86%E6%98%AF%E8%AF%A5%E5%8A%A0%E5%86%85%E5%AD%98%E8%BF%98%E6%98%AF%E5%8A%A0%E5%AE%9E%E4%BE%8B/</guid><description>纵向扩展：升级单个 Redis 实例的资源配置，包括增加内存容量、增加磁盘容量、使用更高配置的 CPU
实施起来简单、直接 当使用 RDB 对数据进行持久化时，如果数据量增加，需要的内存也会增加，主线程 fork 子进程时就可能会阻塞（耗时长） 不要求持久化保存 Redis 数据时是一个不错的选择 受到硬件和成本的限制 横向扩展：增加当前 Redis 实例的个数</description></item><item><title>08｜哨兵集群：哨兵挂了，主从库还能切换吗？</title><link>https://wangze.tech/08%E5%93%A8%E5%85%B5%E9%9B%86%E7%BE%A4%E5%93%A8%E5%85%B5%E6%8C%82%E4%BA%86%E4%B8%BB%E4%BB%8E%E5%BA%93%E8%BF%98%E8%83%BD%E5%88%87%E6%8D%A2%E5%90%97/</link><pubDate>Thu, 18 May 2023 21:29:15 +0800</pubDate><guid>https://wangze.tech/08%E5%93%A8%E5%85%B5%E9%9B%86%E7%BE%A4%E5%93%A8%E5%85%B5%E6%8C%82%E4%BA%86%E4%B8%BB%E4%BB%8E%E5%BA%93%E8%BF%98%E8%83%BD%E5%88%87%E6%8D%A2%E5%90%97/</guid><description>本质上哨兵就是一个运行在特定模式下的 Redis 实例。
基于 pub/sub 机制的哨兵集群组成过程（发布/订阅机制）
只有订阅了同一个频道的应用才能通过发布的消息进行信息交换 哨兵通过 sentinel:hello 频道互相发现、通信 给主库发送 INFO 命令拿到从库列表，哨兵根据列表上的连接信息和从库建立连接并监控</description></item><item><title>07｜哨兵机制：主库挂了，如何不间断服务？</title><link>https://wangze.tech/07%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6%E4%B8%BB%E5%BA%93%E6%8C%82%E4%BA%86%E5%A6%82%E4%BD%95%E4%B8%8D%E9%97%B4%E6%96%AD%E6%9C%8D%E5%8A%A1/</link><pubDate>Thu, 18 May 2023 21:27:01 +0800</pubDate><guid>https://wangze.tech/07%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6%E4%B8%BB%E5%BA%93%E6%8C%82%E4%BA%86%E5%A6%82%E4%BD%95%E4%B8%8D%E9%97%B4%E6%96%AD%E6%9C%8D%E5%8A%A1/</guid><description>哨兵机制的基本流程
监控：判断主从库下线 主观下线
哨兵进程会使用 PING 命令检测它自己和主、从库的网络连接情况，用来判断实例的状态。 如果哨兵发现主库或从库对 PING 命令的响应超时了，哨兵就会先把它标记为“主观下线”。 从库会被直接标记为“主观下线”。 客观下线</description></item><item><title>06｜数据同步：主从库如何实现数据一致？</title><link>https://wangze.tech/06%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E4%B8%BB%E4%BB%8E%E5%BA%93%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4/</link><pubDate>Thu, 18 May 2023 21:20:46 +0800</pubDate><guid>https://wangze.tech/06%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E4%B8%BB%E4%BB%8E%E5%BA%93%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4/</guid><description>写操作：首先到主库执行，主库将写操作同步给从库
同步流程
主从库第一次同步的流程
增量复制流程
全量复制 第一次同步无法避免</description></item><item><title>05｜内存快照：宕机后，Redis 如何实现快速恢复？</title><link>https://wangze.tech/05%E5%86%85%E5%AD%98%E5%BF%AB%E7%85%A7%E5%AE%95%E6%9C%BA%E5%90%8ERedis-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E6%81%A2%E5%A4%8D/</link><pubDate>Thu, 18 May 2023 21:16:43 +0800</pubDate><guid>https://wangze.tech/05%E5%86%85%E5%AD%98%E5%BF%AB%E7%85%A7%E5%AE%95%E6%9C%BA%E5%90%8ERedis-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E6%81%A2%E5%A4%8D/</guid><description>和 AOF 相比，RDB 记录某一时刻的数据，恢复时直接把 RDB 文件读入内存
类比拍照 全量快照 生成 RDB 文件的方案
save：在主线程中执行，会导致阻塞</description></item><item><title>04｜AOF 日志：宕机了，Redis 如何避免数据丢失？</title><link>https://wangze.tech/04AOF-%E6%97%A5%E5%BF%97%E5%AE%95%E6%9C%BA%E4%BA%86Redis-%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1/</link><pubDate>Thu, 18 May 2023 21:13:32 +0800</pubDate><guid>https://wangze.tech/04AOF-%E6%97%A5%E5%BF%97%E5%AE%95%E6%9C%BA%E4%BA%86Redis-%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1/</guid><description>Redis 作为缓存使用
从数据库读取数据恢复 当需要恢复时数据库压力大、Redis 响应慢 写后日志：先执行命令把数据写入内存，再记录日志
不会阻塞当前的写操作 记录的命令没有错误 没来得及记录时，宕机会丢失数据 在主线程写，写盘压力大可能导致后续操作无法执行 日志格式示例</description></item><item><title>03｜高性能 IO 模型：为什么单线程 Redis 那么快？</title><link>https://wangze.tech/03%E9%AB%98%E6%80%A7%E8%83%BD-IO-%E6%A8%A1%E5%9E%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8D%95%E7%BA%BF%E7%A8%8B-Redis-%E9%82%A3%E4%B9%88%E5%BF%AB/</link><pubDate>Thu, 18 May 2023 21:11:47 +0800</pubDate><guid>https://wangze.tech/03%E9%AB%98%E6%80%A7%E8%83%BD-IO-%E6%A8%A1%E5%9E%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8D%95%E7%BA%BF%E7%A8%8B-Redis-%E9%82%A3%E4%B9%88%E5%BF%AB/</guid><description>Redis 的网络 IO 和键值对读写由一个线程完成
当客户端和 Reids 的网络连接断开时，Redis 不会等待客户端恢复连接 Redis 的其他功能，比如持久化、异步删除、集群数据同步等，由额外的线程执行
单线程设计机制
多线程编程模式：共享资源的并发访问控制问题 在内存中完成大部分操作 + 高效的数据结构 多路复用机制（select/epoll 机制）</description></item><item><title>02｜数据结构：快速的 Redis 有哪些慢操作？</title><link>https://wangze.tech/02%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BF%AB%E9%80%9F%E7%9A%84-Redis-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%85%A2%E6%93%8D%E4%BD%9C/</link><pubDate>Thu, 18 May 2023 21:02:10 +0800</pubDate><guid>https://wangze.tech/02%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BF%AB%E9%80%9F%E7%9A%84-Redis-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%85%A2%E6%93%8D%E4%BD%9C/</guid><description>Redis 数据类型和底层数据结构的对应关系
Redis 使用一个哈希表 O(1) 保存所有键值对
全局哈希表（数组）
哈希桶</description></item><item><title>01｜基础架构：一个键值数据库包含什么？</title><link>https://wangze.tech/01%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E4%B8%AA%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8C%85%E5%90%AB%E4%BB%80%E4%B9%88/</link><pubDate>Thu, 18 May 2023 14:57:04 +0800</pubDate><guid>https://wangze.tech/01%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E4%B8%AA%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8C%85%E5%90%AB%E4%BB%80%E4%B9%88/</guid><description>操作模块
PUT：新写入或更新一个 key-value 对，如 PUT hello world GET：根据 K 读取 V DELETE：根据 K 删除整个 KV 对 SCAN：根据一段 key 的范围返回相应的 value 值 访问模式</description></item><item><title>00｜开篇词</title><link>https://wangze.tech/00%E5%BC%80%E7%AF%87%E8%AF%8D/</link><pubDate>Thu, 18 May 2023 14:52:44 +0800</pubDate><guid>https://wangze.tech/00%E5%BC%80%E7%AF%87%E8%AF%8D/</guid><description>1 Redis 的“两大维度，三大主线
应用纬度
缓存应用 集群应用 数据结构应用 系统纬度
高性能主线</description></item><item><title>Redis 核心技术与实战</title><link>https://wangze.tech/Redis-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/</link><pubDate>Thu, 18 May 2023 00:27:15 +0800</pubDate><guid>https://wangze.tech/Redis-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/</guid><description> 内容整理自极客时间 《Redis 核心技术与实战》)
基础篇 [[00｜开篇词]] [[01｜基础架构：一个键值数据库包含什么？]] [[02｜数据结构：快速的 Redis 有哪些慢操作？]] [[03｜高性能 IO 模型：为什么单线程 Redis 那么快？]] [[04｜AOF 日志：宕机了，Redis 如何避免数据丢失？]] [[05｜内存快照：宕机后，Redis 如何实现快速恢复？]] [[06｜数据同步：主从库如何实现数据一致？]] [[07｜哨兵机制：主库挂了，如何不间断服务？]] [[08｜哨兵集群：哨兵挂了，主从库还能切换吗？]] [[09｜切片集群：数据增多了，是该加内存还是加实例？]] 实践篇 [[11｜“万金油”的 String，为什么不好用了？]] [[12｜有一亿个 keys 要统计，应该用哪种集合？]] [[13｜GEO 是什么？还可以定义新的数据类型吗？]] [[14｜如何在 Redis 中保存时间序列数据？]] [[15｜消息队列的考验：Redis 有哪些解决方案？]] [[16｜异步机制：如何避免单线程模型的阻塞？]] [[17｜为什么 CPU 结构也会影响 Redis 的性能？]] [[18｜波动的响应延迟：如何应对变慢的 Redis？（上）]] [[19｜波动的响应延迟：如何应对变慢的 Redis？（下）]] [[20｜删除数据后，为什么内存占用率还是很高？]] [[21｜缓冲区：一个可能引发“惨案”的地方]] [[22｜第 11～21 讲课后思考题答案及常见问题答疑]] [[23｜旁路缓存：Redis 是如何工作的？]] [[24｜替换策略：缓存满了怎么办？]] [[25｜缓存异常（上）：如何解决缓存和数据库的数据不一致问题？]] [[26｜缓存异常（下）：如何解决缓存雪崩、击穿、穿透难题？]] [[27｜缓存被污染了，该怎么办？]] [[28｜Pika：如何基于 SSD 实现大容量 Redis？]] [[29｜无锁的原子操作：Redis 如何应对并发访问？]] [[30｜如何使用 Redis 实现分布式锁？]] 未来篇 加餐篇</description></item></channel></rss>