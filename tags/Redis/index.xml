<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Redis on</title><link>https://wangze.tech/tags/Redis/</link><description>Recent content in Redis on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 18 May 2023 21:33:25 +0800</lastBuildDate><atom:link href="https://wangze.tech/tags/Redis/index.xml" rel="self" type="application/rss+xml"/><item><title>09｜切片集群：数据增多了，是该加内存还是加实例？</title><link>https://wangze.tech/09%E5%88%87%E7%89%87%E9%9B%86%E7%BE%A4%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%A4%9A%E4%BA%86%E6%98%AF%E8%AF%A5%E5%8A%A0%E5%86%85%E5%AD%98%E8%BF%98%E6%98%AF%E5%8A%A0%E5%AE%9E%E4%BE%8B/</link><pubDate>Thu, 18 May 2023 21:33:25 +0800</pubDate><guid>https://wangze.tech/09%E5%88%87%E7%89%87%E9%9B%86%E7%BE%A4%E6%95%B0%E6%8D%AE%E5%A2%9E%E5%A4%9A%E4%BA%86%E6%98%AF%E8%AF%A5%E5%8A%A0%E5%86%85%E5%AD%98%E8%BF%98%E6%98%AF%E5%8A%A0%E5%AE%9E%E4%BE%8B/</guid><description>纵向扩展：升级单个 Redis 实例的资源配置，包括增加内存容量、增加磁盘容量、使用更高配置的 CPU
实施起来简单、直接 当使用 RDB 对数据进行持久化时，如果数据量增加，需要的内存也会增加，主线程 fork 子进程时就可能会阻塞（耗时长） 不要求持久化保存 Redis 数据时是一个不错的选择 受到硬件和成本的限制 横向扩展：增加当前 Redis 实例的个数</description></item><item><title>08｜哨兵集群：哨兵挂了，主从库还能切换吗？</title><link>https://wangze.tech/08%E5%93%A8%E5%85%B5%E9%9B%86%E7%BE%A4%E5%93%A8%E5%85%B5%E6%8C%82%E4%BA%86%E4%B8%BB%E4%BB%8E%E5%BA%93%E8%BF%98%E8%83%BD%E5%88%87%E6%8D%A2%E5%90%97/</link><pubDate>Thu, 18 May 2023 21:29:15 +0800</pubDate><guid>https://wangze.tech/08%E5%93%A8%E5%85%B5%E9%9B%86%E7%BE%A4%E5%93%A8%E5%85%B5%E6%8C%82%E4%BA%86%E4%B8%BB%E4%BB%8E%E5%BA%93%E8%BF%98%E8%83%BD%E5%88%87%E6%8D%A2%E5%90%97/</guid><description>本质上哨兵就是一个运行在特定模式下的 Redis 实例。
基于 pub/sub 机制的哨兵集群组成过程（发布/订阅机制）
只有订阅了同一个频道的应用才能通过发布的消息进行信息交换 哨兵通过 sentinel:hello 频道互相发现、通信 给主库发送 INFO 命令拿到从库列表，哨兵根据列表上的连接信息和从库建立连接并监控</description></item><item><title>07｜哨兵机制：主库挂了，如何不间断服务？</title><link>https://wangze.tech/07%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6%E4%B8%BB%E5%BA%93%E6%8C%82%E4%BA%86%E5%A6%82%E4%BD%95%E4%B8%8D%E9%97%B4%E6%96%AD%E6%9C%8D%E5%8A%A1/</link><pubDate>Thu, 18 May 2023 21:27:01 +0800</pubDate><guid>https://wangze.tech/07%E5%93%A8%E5%85%B5%E6%9C%BA%E5%88%B6%E4%B8%BB%E5%BA%93%E6%8C%82%E4%BA%86%E5%A6%82%E4%BD%95%E4%B8%8D%E9%97%B4%E6%96%AD%E6%9C%8D%E5%8A%A1/</guid><description>哨兵机制的基本流程
监控：判断主从库下线 主观下线
哨兵进程会使用 PING 命令检测它自己和主、从库的网络连接情况，用来判断实例的状态。 如果哨兵发现主库或从库对 PING 命令的响应超时了，哨兵就会先把它标记为“主观下线”。 从库会被直接标记为“主观下线”。 客观下线</description></item><item><title>06｜数据同步：主从库如何实现数据一致？</title><link>https://wangze.tech/06%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E4%B8%BB%E4%BB%8E%E5%BA%93%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4/</link><pubDate>Thu, 18 May 2023 21:20:46 +0800</pubDate><guid>https://wangze.tech/06%E6%95%B0%E6%8D%AE%E5%90%8C%E6%AD%A5%E4%B8%BB%E4%BB%8E%E5%BA%93%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%95%B0%E6%8D%AE%E4%B8%80%E8%87%B4/</guid><description>写操作：首先到主库执行，主库将写操作同步给从库
同步流程
主从库第一次同步的流程
增量复制流程
全量复制 第一次同步无法避免</description></item><item><title>05｜内存快照：宕机后，Redis 如何实现快速恢复？</title><link>https://wangze.tech/05%E5%86%85%E5%AD%98%E5%BF%AB%E7%85%A7%E5%AE%95%E6%9C%BA%E5%90%8ERedis-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E6%81%A2%E5%A4%8D/</link><pubDate>Thu, 18 May 2023 21:16:43 +0800</pubDate><guid>https://wangze.tech/05%E5%86%85%E5%AD%98%E5%BF%AB%E7%85%A7%E5%AE%95%E6%9C%BA%E5%90%8ERedis-%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E5%BF%AB%E9%80%9F%E6%81%A2%E5%A4%8D/</guid><description>和 AOF 相比，RDB 记录某一时刻的数据，恢复时直接把 RDB 文件读入内存
类比拍照 全量快照 生成 RDB 文件的方案
save：在主线程中执行，会导致阻塞</description></item><item><title>04｜AOF 日志：宕机了，Redis 如何避免数据丢失？</title><link>https://wangze.tech/04AOF-%E6%97%A5%E5%BF%97%E5%AE%95%E6%9C%BA%E4%BA%86Redis-%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1/</link><pubDate>Thu, 18 May 2023 21:13:32 +0800</pubDate><guid>https://wangze.tech/04AOF-%E6%97%A5%E5%BF%97%E5%AE%95%E6%9C%BA%E4%BA%86Redis-%E5%A6%82%E4%BD%95%E9%81%BF%E5%85%8D%E6%95%B0%E6%8D%AE%E4%B8%A2%E5%A4%B1/</guid><description>Redis 作为缓存使用
从数据库读取数据恢复 当需要恢复时数据库压力大、Redis 响应慢 写后日志：先执行命令把数据写入内存，再记录日志
不会阻塞当前的写操作 记录的命令没有错误 没来得及记录时，宕机会丢失数据 在主线程写，写盘压力大可能导致后续操作无法执行 日志格式示例</description></item><item><title>03｜高性能 IO 模型：为什么单线程 Redis 那么快？</title><link>https://wangze.tech/03%E9%AB%98%E6%80%A7%E8%83%BD-IO-%E6%A8%A1%E5%9E%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8D%95%E7%BA%BF%E7%A8%8B-Redis-%E9%82%A3%E4%B9%88%E5%BF%AB/</link><pubDate>Thu, 18 May 2023 21:11:47 +0800</pubDate><guid>https://wangze.tech/03%E9%AB%98%E6%80%A7%E8%83%BD-IO-%E6%A8%A1%E5%9E%8B%E4%B8%BA%E4%BB%80%E4%B9%88%E5%8D%95%E7%BA%BF%E7%A8%8B-Redis-%E9%82%A3%E4%B9%88%E5%BF%AB/</guid><description>Redis 的网络 IO 和键值对读写由一个线程完成
当客户端和 Reids 的网络连接断开时，Redis 不会等待客户端恢复连接 Redis 的其他功能，比如持久化、异步删除、集群数据同步等，由额外的线程执行
单线程设计机制
多线程编程模式：共享资源的并发访问控制问题 在内存中完成大部分操作 + 高效的数据结构 多路复用机制（select/epoll 机制）</description></item><item><title>02｜数据结构：快速的 Redis 有哪些慢操作？</title><link>https://wangze.tech/02%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BF%AB%E9%80%9F%E7%9A%84-Redis-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%85%A2%E6%93%8D%E4%BD%9C/</link><pubDate>Thu, 18 May 2023 21:02:10 +0800</pubDate><guid>https://wangze.tech/02%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E5%BF%AB%E9%80%9F%E7%9A%84-Redis-%E6%9C%89%E5%93%AA%E4%BA%9B%E6%85%A2%E6%93%8D%E4%BD%9C/</guid><description>Redis 数据类型和底层数据结构的对应关系
Redis 使用一个哈希表 O(1) 保存所有键值对
全局哈希表（数组）
哈希桶</description></item><item><title>01｜基础架构：一个键值数据库包含什么？</title><link>https://wangze.tech/01%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E4%B8%AA%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8C%85%E5%90%AB%E4%BB%80%E4%B9%88/</link><pubDate>Thu, 18 May 2023 14:57:04 +0800</pubDate><guid>https://wangze.tech/01%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E4%B8%AA%E9%94%AE%E5%80%BC%E6%95%B0%E6%8D%AE%E5%BA%93%E5%8C%85%E5%90%AB%E4%BB%80%E4%B9%88/</guid><description>操作模块
PUT：新写入或更新一个 key-value 对，如 PUT hello world GET：根据 K 读取 V DELETE：根据 K 删除整个 KV 对 SCAN：根据一段 key 的范围返回相应的 value 值 访问模式</description></item><item><title>00｜开篇词</title><link>https://wangze.tech/00%E5%BC%80%E7%AF%87%E8%AF%8D/</link><pubDate>Thu, 18 May 2023 14:52:44 +0800</pubDate><guid>https://wangze.tech/00%E5%BC%80%E7%AF%87%E8%AF%8D/</guid><description>1 Redis 的“两大维度，三大主线
应用纬度
缓存应用 集群应用 数据结构应用 系统纬度
高性能主线</description></item><item><title>Redis 核心技术与实战</title><link>https://wangze.tech/Redis-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/</link><pubDate>Thu, 18 May 2023 00:27:15 +0800</pubDate><guid>https://wangze.tech/Redis-%E6%A0%B8%E5%BF%83%E6%8A%80%E6%9C%AF%E4%B8%8E%E5%AE%9E%E6%88%98/</guid><description> 内容整理自极客时间 《Redis 核心技术与实战》)
基础篇 [[00｜开篇词]] [[01｜基础架构：一个键值数据库包含什么？]] [[02｜数据结构：快速的 Redis 有哪些慢操作？]] [[03｜高性能 IO 模型：为什么单线程 Redis 那么快？]] [[04｜AOF 日志：宕机了，Redis 如何避免数据丢失？]] [[05｜内存快照：宕机后，Redis 如何实现快速恢复？]] [[06｜数据同步：主从库如何实现数据一致？]] [[07｜哨兵机制：主库挂了，如何不间断服务？]] [[08｜哨兵集群：哨兵挂了，主从库还能切换吗？]] [[09｜切片集群：数据增多了，是该加内存还是加实例？]] 实践篇 未来篇 加餐篇</description></item></channel></rss>