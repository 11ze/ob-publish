<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>MySQL on</title><link>https://wangze.tech/tags/MySQL/</link><description>Recent content in MySQL on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Wed, 17 May 2023 09:52:27 +0800</lastBuildDate><atom:link href="https://wangze.tech/tags/MySQL/index.xml" rel="self" type="application/rss+xml"/><item><title>02｜日志系统：一条 SQL 更新语句是如何执行的？</title><link>https://wangze.tech/02%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E4%B8%80%E6%9D%A1-SQL-%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/</link><pubDate>Wed, 17 May 2023 09:52:27 +0800</pubDate><guid>https://wangze.tech/02%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F%E4%B8%80%E6%9D%A1-SQL-%E6%9B%B4%E6%96%B0%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/</guid><description>MySQL 的逻辑链接架构图
update 语句执行流程
重要的日志模块：redo log</description></item><item><title>03｜事务隔离：为什么你改了为还看不见？</title><link>https://wangze.tech/03%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E6%94%B9%E4%BA%86%E4%B8%BA%E8%BF%98%E7%9C%8B%E4%B8%8D%E8%A7%81/</link><pubDate>Wed, 17 May 2023 09:40:20 +0800</pubDate><guid>https://wangze.tech/03%E4%BA%8B%E5%8A%A1%E9%9A%94%E7%A6%BB%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BD%A0%E6%94%B9%E4%BA%86%E4%B8%BA%E8%BF%98%E7%9C%8B%E4%B8%8D%E8%A7%81/</guid><description>隔离型与隔离级别 读未提交 read uncommitted 一个事务还没提交时，它做的变更就能被别的事务看到。 别人改数据的事务尚未提交，我在我的事务中也能读到。 读提交 read committed 一个事务提交之后，它做的变更才会被其他事务看到。 别人改数据的事务已经提交，我在我的事务中才能读到。 可重复读 repeatable read 一个事务执行过程中看到的数据，总是跟这个事务在启动时看到的数据是一致的。当然在可重复读隔离级别下，未提交变更对其他事务也是不可见的。 别人改数据的事务已经提交，我在我的事务中也读不到。 串行化 serializable 对于同一行记录，“写”会加“写锁”，“读”会加“读锁”。当出现读写锁冲突的时候，后访问的事务必须等前一个事务执行完成，才能继续执行。 我的事务尚未提交，别人就别想改数据。 事务隔离的实现 以可重复读为例 每条记录在更新的时候会同时记录一条回滚操作 记录上的最新值，通过回滚操作，都可以得到前一个状态的值 系统会判断，当没有事务再需要用到这些回滚日志时，回滚日志才会被删除 如事务提交之前都可能用到 不要使用长事务 MySQL 5.</description></item><item><title>01｜基础架构：一条 SQL 查询语句是如何执行的？</title><link>https://wangze.tech/01%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1-SQL-%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/</link><pubDate>Wed, 17 May 2023 09:36:32 +0800</pubDate><guid>https://wangze.tech/01%E5%9F%BA%E7%A1%80%E6%9E%B6%E6%9E%84%E4%B8%80%E6%9D%A1-SQL-%E6%9F%A5%E8%AF%A2%E8%AF%AD%E5%8F%A5%E6%98%AF%E5%A6%82%E4%BD%95%E6%89%A7%E8%A1%8C%E7%9A%84/</guid><description>MySQL 的逻辑链接架构图 Server 层（共用）
连接器 跟客户端建立连接、获取权限、维持、管理连接 分析器 优化器 执行器 存储引擎层</description></item><item><title>MySQL 实战 45 讲</title><link>https://wangze.tech/MySQL-%E5%AE%9E%E6%88%98-45-%E8%AE%B2/</link><pubDate>Wed, 17 May 2023 09:23:16 +0800</pubDate><guid>https://wangze.tech/MySQL-%E5%AE%9E%E6%88%98-45-%E8%AE%B2/</guid><description>章节分类 开篇词｜这一次，让我们一起来搞懂 MySQL - 极客时间
索引：[[04｜深入浅出索引（上）|04]]、[[05｜深入浅出索引（下）|05]]、[[09｜普通索引和唯一索引，应该怎么选择？|09]]、[[10｜MySQL 为什么有时候会选错索引？|10]]、[[11｜怎么给字符串字段加索引？|11]]、[[15｜答疑文章（一）：日志和索引相关问题|15]]、[[16｜“order by”是怎么工作的？|16]]、[[18｜为什么这些 SQL 语句逻辑相同，性能却差异巨大？|18]] 事务：[[03｜事务隔离：为什么你改了为还看不见？|03]]、[[08｜事务到底是隔离的还是不隔离的？|08]]、[[20｜幻读是什么，幻读有什么问题？|20]] 锁：[[06｜全局锁和表锁：给表加个字段怎么有这么多阻碍？|06]]、[[07｜行锁功过：怎么减少锁对性能的影响？|07]]、[[13｜为什么表数据删掉一半，表文件大小不变？|13]]、[[19｜为什么我只查一行的语句，也执行这么慢？|19]]、[[20｜幻读是什么，幻读有什么问题？|20]]、[[21｜为什么我只改一行的语句，锁这么多？|21]]、30、40 日志与主备：[[02｜日志系统：一条 SQL 更新语句是如何执行的？|02]]、[[12｜为什么我的 MySQL 会“抖”一下？|12]]、23、24、25、26、27、28、29、31 临时表：[[17｜如何正确地显示随机消息？|17]]、34、35、36、37、43 实用性：[[01｜基础架构：一条 SQL 查询语句是如何执行的？|01]]、[[14｜count(*) 这么慢，我该怎么办？|14]]、32、33、41、44 基础篇 [[01｜基础架构：一条 SQL 查询语句是如何执行的？]] [[02｜日志系统：一条 SQL 更新语句是如何执行的？]] [[03｜事务隔离：为什么你改了为还看不见？]] [[04｜深入浅出索引（上）]] [[05｜深入浅出索引（下）]] [[06｜全局锁和表锁：给表加个字段怎么有这么多阻碍？]] [[07｜行锁功过：怎么减少锁对性能的影响？]] [[08｜事务到底是隔离的还是不隔离的？]] 实践篇 [[09｜普通索引和唯一索引，应该怎么选择？]] [[10｜MySQL 为什么有时候会选错索引？]] [[11｜怎么给字符串字段加索引？]] [[12｜为什么我的 MySQL 会“抖”一下？]] [[13｜为什么表数据删掉一半，表文件大小不变？]] [[14｜count(*) 这么慢，我该怎么办？]] [[15｜答疑文章（一）：日志和索引相关问题]] [[16｜“order by”是怎么工作的？]] [[17｜如何正确地显示随机消息？]] [[18｜为什么这些 SQL 语句逻辑相同，性能却差异巨大？]] [[19｜为什么我只查一行的语句，也执行这么慢？]] [[20｜幻读是什么，幻读有什么问题？]] [[21｜为什么我只改一行的语句，锁这么多？]] [[22｜MySQL有哪些“饮鸩止渴”提高性能的方法？]] [[23｜MySQL 是怎么保证数据不丢的？]] [[24｜MySQL 是怎么保证主备一致的？]] [[25｜MySQL 是怎么保证高可用的？]] [[26｜备库为什么会延迟好几个小时？]] [[27｜主库出问题了，从库怎么办？]] [[28｜读写分离有哪些坑？]] [[29｜如何判断一个数据库是不是出问题了？]] [[30｜答疑文章（二）：用动态的观点看加锁]] [[31｜误删数据后除了跑路，还能怎么办？]] [[32｜为什么还有 kill 不掉的语句？]] [[33｜我查这么多数据，会不会把数据库内存打爆？]] [[34｜到底可不可以使用 join ？]] [[35｜join 语句怎么优化？]] [[36｜为什么临时表可以重名？]] [[37｜什么时候会使用内部临时表？]] [[38｜都说 InnoDB 好，那还要不要使用 Memory 引擎？]] [[39｜自增主键为什么不是连续的？]] [[40｜insert 语句的锁为什么这么多？]] [[41｜怎么最快地复制一张表？]] [[42｜grant 之后要跟着 flush privileges 吗？]] [[43｜要不要使用分区表？]] [[44｜答疑文章（三）：说一说这些好问题]] [[45｜自增 id 用完怎么办？]]</description></item></channel></rss>