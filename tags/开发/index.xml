<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>开发 on</title><link>https://wangze.tech/tags/%E5%BC%80%E5%8F%91/</link><description>Recent content in 开发 on</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Sun, 07 May 2023 00:00:00 +0000</lastBuildDate><atom:link href="https://wangze.tech/tags/%E5%BC%80%E5%8F%91/index.xml" rel="self" type="application/rss+xml"/><item><title>开发环境</title><link>https://wangze.tech/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</link><pubDate>Sun, 07 May 2023 00:00:00 +0000</pubDate><guid>https://wangze.tech/%E5%BC%80%E5%8F%91%E7%8E%AF%E5%A2%83/</guid><description>设备 MacBook Pro（M1） 先更新系统 Homebrew 官网 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 brew tap homebrew/cask-drivers brew tap homebrew/cask-fonts brew tap homebrew/cask-versions brew tap buo/cask-upgrade brew tap mongodb/brew brew install git-lfs brew install git-flow brew install font-jetbrains-mono brew install font-lxgw-wenkai # 访达插件 brew install --cask qlmarkdown # Markdown brew install --cask --no-quarantine syntax-highlight # 代码高亮 brew install --cask qlstephen # 查看没有文件扩展名的纯文本文件 # 以下应用，安装后关闭自动检查更新 brew install --cask font-hack-nerd-font brew install --cask maczip brew install --cask wechatwebdevtools # 微信小程序开发者工具 brew install --cask mini-program-studio # 支付宝小程序开发者工具 brew install --cask macs-fan-control brew install --cask mongodb-compass brew install --cask another-redis-desktop-manager brew install --cask iina # 本地音视频播放器 brew install --cask cheatsheet # 快捷键提示 brew install --cask raycast brew install battery # https://github.</description></item><item><title>Rate Limit</title><link>https://wangze.tech/Rate-Limit/</link><pubDate>Fri, 05 May 2023 00:00:00 +0000</pubDate><guid>https://wangze.tech/Rate-Limit/</guid><description>功能 限制接口请求数
缓存数据格式 1 2 3 4 5 6 7 key: { current_count: number; // 也可以不要该字段，每次请求都算一次队列长度 started_at: date; request_time_queue: date[]; time_range: number; // 时间窗口大小 count_limit: number; } 实现流程 请求进来 拼接出 key 查找 key 对应的缓存 取出队头，跟当前时间比较 a.</description></item></channel></rss>